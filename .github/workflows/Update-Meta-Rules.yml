name: Update Meta Rules

on:
  schedule:
    - cron: '0 7 * * *'  # 每天早上7点运行
  workflow_dispatch:  # 允许手动触发

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.timestamp }}
    
    steps:
      - name: Set timestamp
        id: set-timestamp
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT
        
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Setup custom actions
        uses: actions/github-script@v7
        with:
          script: |
            await exec.exec('git', ['config', '--global', 'user.name', 'github-actions[bot]']);
            await exec.exec('git', ['config', '--global', 'user.email', 'github-actions[bot]@users.noreply.github.com']);
            
      - name: Clone Meta Rules
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-dat
          ref: meta
          path: meta_temp
          fetch-depth: 1
          
      - name: Upload Meta Rules as artifact
        uses: actions/upload-artifact@v4
        with:
          name: meta-rules-source
          path: meta_temp/
          retention-days: 1
          
      - name: Clean up meta_temp
        run: |
          rm -rf meta_temp/

  process-ipv6-rules:
    needs: prepare
    runs-on: ubuntu-latest
    
    steps:
      - name: Download Meta Rules artifact
        uses: actions/download-artifact@v4
        with:
          name: meta-rules-source
          path: meta_temp
          
      - name: Process IPv6 Rules
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // 处理IPv6规则
            const listDir = path.join('meta_temp', 'geo', 'geoip', 'classical');
            if (fs.existsSync(listDir)) {
              console.log('处理IPv6规则...');
              const ipv6Files = fs.readdirSync(listDir)
                .filter(file => file.endsWith('.list'))
                .map(file => path.join(listDir, file));
                
              for (const file of ipv6Files) {
                const content = fs.readFileSync(file, 'utf8');
                const processed = content.replace(/^(IP-CIDR,)([^,]*:)/gm, 'IP-CIDR6,$2');
                fs.writeFileSync(file, processed);
              }
            }
      
      - name: Upload processed IPv6 rules
        uses: actions/upload-artifact@v4
        with:
          name: processed-ipv6-rules
          path: meta_temp/geo/
          retention-days: 1
          
      - name: Clean up meta_temp
        run: |
          rm -rf meta_temp/

  process-asn-rules:
    needs: prepare
    runs-on: ubuntu-latest
    
    steps:
      - name: Download Meta Rules artifact
        uses: actions/download-artifact@v4
        with:
          name: meta-rules-source
          path: meta_temp
          
      - name: Process ASN Rules
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // 处理ASN规则
            const asnDir = path.join('meta_temp', 'asn');
            const asnClassicalDir = path.join(asnDir, 'classical');
            
            if (!fs.existsSync(asnClassicalDir)) {
              fs.mkdirSync(asnClassicalDir, { recursive: true });
            }
            
            console.log('处理ASN规则...');
            const files = fs.readdirSync(asnDir)
              .filter(file => file.endsWith('.list') && fs.statSync(path.join(asnDir, file)).isFile());
              
            // 批量处理所有ASN文件
            for (const file of files) {
              const content = fs.readFileSync(path.join(asnDir, file), 'utf8');
              const processedContent = content
                .split('\n')
                .map(line => {
                  if (line.startsWith('#') || line.trim() === '') return line;
                  if (line.includes(':')) return `IP-CIDR6,${line}`;
                  return `IP-CIDR,${line}`;
                })
                .join('\n');
                
              fs.writeFileSync(path.join(asnClassicalDir, file), processedContent);
            }
      
      - name: Upload processed ASN rules
        uses: actions/upload-artifact@v4
        with:
          name: processed-asn-rules
          path: meta_temp/asn/
          retention-days: 1
          
      - name: Clean up meta_temp
        run: |
          rm -rf meta_temp/

  process-other-files:
    needs: prepare
    runs-on: ubuntu-latest
    
    steps:
      - name: Download Meta Rules artifact
        uses: actions/download-artifact@v4
        with:
          name: meta-rules-source
          path: meta_temp
          
      - name: Upload other files
        uses: actions/upload-artifact@v4
        with:
          name: other-meta-files
          path: |
            meta_temp/
            !meta_temp/geo/
            !meta_temp/asn/
          retention-days: 1
          
      - name: Clean up meta_temp
        run: |
          rm -rf meta_temp/

  merge-and-commit:
    needs: [prepare, process-ipv6-rules, process-asn-rules, process-other-files]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Setup Git
        uses: actions/github-script@v7
        with:
          script: |
            await exec.exec('git', ['config', '--global', 'user.name', 'github-actions[bot]']);
            await exec.exec('git', ['config', '--global', 'user.email', 'github-actions[bot]@users.noreply.github.com']);
      
      - name: Download all processed artifacts
        uses: actions/download-artifact@v4
        with:
          path: processed_artifacts
          
      - name: Merge and update local repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // 更新本地仓库
            console.log('更新本地仓库...');
            const repoDir = 'rule-set/repo';
            if (fs.existsSync(repoDir)) {
              // 递归删除目录内容但保留目录本身
              const deleteContents = (dir) => {
                if (!fs.existsSync(dir)) return;
                const items = fs.readdirSync(dir);
                for (const item of items) {
                  const itemPath = path.join(dir, item);
                  if (fs.lstatSync(itemPath).isDirectory()) {
                    deleteContents(itemPath);
                    fs.rmdirSync(itemPath);
                  } else {
                    fs.unlinkSync(itemPath);
                  }
                }
              };
              deleteContents(repoDir);
            } else {
              fs.mkdirSync(repoDir, { recursive: true });
            }
            
            // 直接将处理后的文件合并到目标目录
            const copyDir = (src, dest) => {
              if (!fs.existsSync(dest)) {
                fs.mkdirSync(dest, { recursive: true });
              }
              
              const items = fs.readdirSync(src);
              for (const item of items) {
                const srcPath = path.join(src, item);
                const destPath = path.join(dest, item);
                
                if (fs.lstatSync(srcPath).isDirectory()) {
                  copyDir(srcPath, destPath);
                } else {
                  fs.copyFileSync(srcPath, destPath);
                }
              }
            };
            
            // 从processed_artifacts中提取并合并所有meta_temp目录
            const artifactDirs = fs.readdirSync('processed_artifacts');
            for (const artifactDir of artifactDirs) {
              const artifactPath = path.join('processed_artifacts', artifactDir);
              if (fs.lstatSync(artifactPath).isDirectory()) {
                // 对于每个工件目录，如果有meta_temp目录就复制到最终目录
                if (fs.existsSync(path.join(artifactPath, 'meta_temp'))) {
                  copyDir(path.join(artifactPath, 'meta_temp'), repoDir);
                } else {
                  // 否则直接复制整个目录内容
                  copyDir(artifactPath, repoDir);
                }
              }
            }
            
            // 删除临时目录
            console.log('删除临时目录...');
            fs.rmSync('processed_artifacts', { recursive: true, force: true });
            
            // 返回有无更改
            return { hasChanges: true };

      - name: Check for changes
        id: check_changes
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            try {
              execSync('git add rule-set/repo/');
              const hasChanges = execSync('git status --porcelain').toString().trim().length > 0;
              core.setOutput('has_changes', hasChanges);
              return { hasChanges };
            } catch (error) {
              console.error('检查更改时出错:', error);
              core.setOutput('has_changes', false);
              return { hasChanges: false };
            }
          result-encoding: json
      
      - name: Commit and push changes
        if: ${{ fromJSON(steps.check_changes.outputs.result).hasChanges }}
        run: |
          git commit -m "Chore: Update Meta Rules"
          git push 