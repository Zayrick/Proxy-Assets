name: Meta Rules Update

on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch:

jobs:
  Rules-Update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: main-repo
          fetch-depth: 1
          sparse-checkout: false

      - name: Clone Meta Rules Repository
        run: |
          echo "::group::Cloning Meta Rules Repository"
          mkdir -p temp-repo
          git clone --depth 1 --branch meta https://github.com/MetaCubeX/meta-rules-dat.git temp-repo
          echo "Meta rules repository cloned successfully to temp-repo"
          ls -la temp-repo
          echo "::endgroup::"

      - name: Process IPv6 Rules
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            const { promisify } = require('util');
            const glob = promisify(require('glob'));

            async function processIPv6() {
              const LIST_DIR = 'temp-repo/geo/geoip/classical';
              const files = await glob(path.join(LIST_DIR, '**/*.list'));
              
              console.log(`找到IPv6规则文件：${files.length}个`);
              
              // 分批处理防止内存溢出
              const batchSize = 200;
              for (let i = 0; i < files.length; i += batchSize) {
                const batch = files.slice(i, i + batchSize);
                await Promise.all(batch.map(async (file) => {
                  const content = await fs.readFile(file, 'utf8');
                  const newContent = content.replace(/^(IP-CIDR,)([^,]*:)/gm, 'IP-CIDR6,$2');
                  await fs.writeFile(file, newContent);
                }));
                // 只在每批次完成后输出一次
                console.log(`IPv6处理进度：${Math.min(i + batchSize, files.length)}/${files.length} 文件（${Math.floor((Math.min(i + batchSize, files.length) / files.length) * 100)}%）`);
              }
              console.log(`IPv6规则处理完成，总共处理：${files.length}个文件`);
            }

            processIPv6().catch(console.error);

      - name: Process ASN Directory
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            const { promisify } = require('util');
            const glob = promisify(require('glob'));

            async function processASN() {
              const ASN_DIR = 'temp-repo/asn';
              const ASN_CLASSICAL_DIR = path.join(ASN_DIR, 'classical');
              
              // 创建目录
              await fs.mkdir(ASN_CLASSICAL_DIR, { recursive: true });

              // 分批复制文件
              const sourceFiles = await glob(path.join(ASN_DIR, '*.list'));
              console.log(`找到ASN源文件：${sourceFiles.length}个`);
              
              const batchSize = 200;
              for (let i = 0; i < sourceFiles.length; i += batchSize) {
                const batch = sourceFiles.slice(i, i + batchSize);
                await Promise.all(batch.map(async (file) => {
                  const dest = path.join(ASN_CLASSICAL_DIR, path.basename(file));
                  await fs.copyFile(file, dest);
                }));
                console.log(`ASN文件复制进度：${Math.min(i + batchSize, sourceFiles.length)}/${sourceFiles.length} 文件（${Math.floor((Math.min(i + batchSize, sourceFiles.length) / sourceFiles.length) * 100)}%）`);
              }

              // 分批处理文件
              const targetFiles = await glob(path.join(ASN_CLASSICAL_DIR, '*.list'));
              for (let i = 0; i < targetFiles.length; i += batchSize) {
                const batch = targetFiles.slice(i, i + batchSize);
                await Promise.all(batch.map(async (file) => {
                  let content = await fs.readFile(file, 'utf8');
                  content = content
                    .replace(/^([^#\n].*)$/gm, 'IP-CIDR,$1')
                    .replace(/^IP-CIDR,([^,]*:)/gm, 'IP-CIDR6,$1');
                  await fs.writeFile(file, content);
                }));
              }
            }

            processASN().catch(console.error);

      - name: Prepare Output Directory
        run: |
          echo "::group::Preparing Output Directory"
          FINAL_DIR="main-repo/rule-set/repo"
          if [ -d "$FINAL_DIR" ]; then
            echo "Clearing existing output directory: $FINAL_DIR"
            BEFORE_COUNT=$(find "$FINAL_DIR" -type f | wc -l)
            echo "Files before clearing: $BEFORE_COUNT"
            rm -rf "$FINAL_DIR"/*
            echo "Directory cleared successfully"
          else
            echo "Creating output directory: $FINAL_DIR"
            mkdir -p "$FINAL_DIR"
            echo "Directory created successfully"
          fi
          echo "::endgroup::"

      - name: Copy Processed Files
        run: |
          echo "::group::Copying Processed Files"
          echo "Copying files to target directory: main-repo/rule-set/repo"
          
          SOURCE_COUNT=$(find "temp-repo" -type f | wc -l)
          echo "Source files count: $SOURCE_COUNT"
          find "temp-repo" -type f -name "*.list" | head -n 5 | while read -r file; do
            echo "Sample source file: $file"
          done
          
          cp -r temp-repo/* main-repo/rule-set/repo/
          
          FILE_COUNT=$(find "main-repo/rule-set/repo" -type f | wc -l)
          DIR_COUNT=$(find "main-repo/rule-set/repo" -type d | wc -l)
          echo "Download and update completed"
          echo "Total files copied: $FILE_COUNT in $DIR_COUNT directories"
          
          find "main-repo/rule-set/repo" -type d -mindepth 1 -maxdepth 2 | while read -r dir; do
            FILE_IN_DIR=$(find "$dir" -type f | wc -l)
            echo "Directory: $dir - Contains $FILE_IN_DIR files"
          done
          
          echo "Sample rule files:"
          find "main-repo/rule-set/repo" -type f -name "*.list" | head -n 5
          echo "::endgroup::"

      - name: Commit Changes
        run: |
          echo "::group::Committing Changes"
          cd main-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add rule-set/repo
          
          CHANGES=$(git status --porcelain | wc -l)
          echo "Changed files: $CHANGES"
          
          if [ $CHANGES -gt 0 ]; then
            echo "Changes detected, committing..."
            git commit -m "Chore: Update Meta Rules $(date '+%Y-%m-%d %H:%M')"
            git push
            echo "Changes committed and pushed successfully"
          else
            echo "No changes to commit"
          fi
          echo "::endgroup::"