name: Meta Rules Update

on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch:

jobs:
  Rules-Update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: main-repo
          fetch-depth: 1
          sparse-checkout: |
            rule-set/repo

      - name: Clone Meta Rules Repository
        run: |
          echo "::group::Cloning Meta Rules Repository"
          mkdir -p temp-repo
          git clone --depth 1 --branch meta https://github.com/MetaCubeX/meta-rules-dat.git temp-repo
          echo "Meta rules repository cloned successfully"
          echo "::endgroup::"

      - name: Process IPv6 Rules
        run: |
          echo "::group::Processing IPv6 Rules"
          LIST_DIR="temp-repo/geo/geoip/classical"
          if [ -d "$LIST_DIR" ]; then
            BEFORE_COUNT=$(find "$LIST_DIR" -type f -name "*.list" -exec grep -l "IP-CIDR,.*:" {} \; | wc -l)
            echo "IPv6 rules files before conversion: $BEFORE_COUNT"
            
            # 并行处理所有文件
            find "$LIST_DIR" -type f -name "*.list" | parallel -j $(nproc) "sed -i -E 's/^(IP-CIDR,)([^,]*:)/IP-CIDR6,\2/' {}"
            
            AFTER_COUNT=$(find "$LIST_DIR" -type f -name "*.list" -exec grep -l "IP-CIDR6," {} \; | wc -l)
            echo "IPv6 rules files after conversion: $AFTER_COUNT"
          else
            echo "Directory $LIST_DIR does not exist, skipping IPv6 rules conversion"
          fi
          echo "::endgroup::"

      - name: Process ASN Directory
        run: |
          echo "::group::Processing ASN Directory"
          ASN_DIR="temp-repo/asn"
          ASN_CLASSICAL_DIR="$ASN_DIR/classical"
          
          mkdir -p "$ASN_CLASSICAL_DIR"
          
          # Copy ASN list files - use rsync for better performance
          if [ -d "$ASN_DIR" ]; then
            rsync -a --include="*.list" --exclude="*/" "$ASN_DIR/" "$ASN_CLASSICAL_DIR/"
            FILES_COPIED=$(find "$ASN_CLASSICAL_DIR" -maxdepth 1 -type f -name "*.list" | wc -l)
            echo "ASN files copied: $FILES_COPIED"
            
            # 批量处理文件 - 使用并行处理
            if [ $FILES_COPIED -gt 0 ]; then
              find "$ASN_CLASSICAL_DIR" -type f -name "*.list" | parallel -j $(nproc) '
                # 使用单次sed操作替代多次操作
                sed -i -E '\''s/^([^#].*):(.*)$/IP-CIDR6,\1:\2/; s/^([^#IP][^:]*)$/IP-CIDR,\1/'\'' {}
              '
              echo "ASN files processed: $(find "$ASN_CLASSICAL_DIR" -type f -name "*.list" | wc -l)"
            fi
          else
            echo "ASN directory does not exist"
          fi
          echo "::endgroup::"

      - name: Prepare Output Directory
        run: |
          echo "::group::Preparing Output Directory"
          FINAL_DIR="main-repo/rule-set/repo"
          if [ -d "$FINAL_DIR" ]; then
            rm -rf "$FINAL_DIR"/*
            echo "Output directory cleared"
          else
            mkdir -p "$FINAL_DIR"
            echo "Output directory created"
          fi
          echo "::endgroup::"

      - name: Copy Processed Files
        run: |
          echo "::group::Copying Processed Files"
          # 使用rsync替代cp以提高性能，添加静默参数
          rsync -a --quiet temp-repo/ main-repo/rule-set/repo/
          
          # 使用更高效的方式计算文件数量
          FILE_COUNT=$(find "main-repo/rule-set/repo" -type f | wc -l)
          DIR_COUNT=$(find "main-repo/rule-set/repo" -type d | wc -l)
          echo "Files copied: $FILE_COUNT in $DIR_COUNT directories"
          echo "::endgroup::"

      - name: Commit Changes
        run: |
          echo "::group::Committing Changes"
          cd main-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 使用高效的git add方式，添加静默选项和sparse选项
          git add -q --sparse -A rule-set/repo
          
          # 使用git diff提高检测变更的效率
          CHANGES=$(git diff --staged --name-only | wc -l)
          echo "Changed files: $CHANGES"
          
          if [ $CHANGES -gt 0 ]; then
            git commit -q -m "Chore: Update Meta Rules $(date '+%Y-%m-%d %H:%M')"
            git push -q
            echo "Changes committed and pushed successfully"
          else
            echo "No changes to commit"
          fi
          echo "::endgroup::"