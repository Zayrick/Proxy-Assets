name: Meta规则集更新

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  update-meta-rules:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v3
        with:
          path: main-repo

      - name: 设置缓存
        uses: actions/cache@v3
        id: cache-rules
        with:
          path: temp-cache
          key: ${{ runner.os }}-meta-rules-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-meta-rules-

      - name: 克隆Meta规则仓库
        run: |
          mkdir -p temp-repo
          git clone --depth 1 --branch meta https://github.com/MetaCubeX/meta-rules-dat.git temp-repo

      - name: 安装依赖
        run: npm install @actions/io @actions/glob @actions/exec fs-extra

      - name: 处理规则文件
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs-extra');
            const path = require('path');
            const globModule = require('@actions/glob');
            const io = require('@actions/io');
            const exec = require('@actions/exec');
            
            async function processFiles(pattern, processor, batchSize = 100) {
              const globber = await globModule.create(pattern);
              const files = await globber.glob();
              
              // 分批处理文件以避免内存溢出
              for (let i = 0; i < files.length; i += batchSize) {
                const batch = files.slice(i, i + batchSize);
                console.log(`处理批次 ${Math.floor(i/batchSize) + 1}/${Math.ceil(files.length/batchSize)}, 文件数: ${batch.length}`);
                
                for (const file of batch) {
                  await processor(file);
                }
              }
              
              return files.length;
            }
            
            // 处理IPv6规则
            async function processIPv6Rules() {
              const listDir = 'temp-repo/geo/geoip/classical';
              
              if (!fs.existsSync(listDir)) {
                console.log(`目录 ${listDir} 不存在，跳过IPv6规则转换`);
                return;
              }
              
              console.log('正在转换IPv6规则格式...');
              
              await processFiles(`${listDir}/**/*.list`, async (file) => {
                try {
                  let content = await fs.readFile(file, 'utf8');
                  content = content.replace(/^(IP-CIDR,)([^,]*:)/gm, 'IP-CIDR6,$2');
                  await fs.writeFile(file, content, 'utf8');
                } catch (error) {
                  console.error(`处理文件 ${file} 时出错:`, error);
                }
              });
              
              console.log('IPv6规则转换完成');
            }
            
            // 处理ASN目录
            async function processASNDir() {
              const asnDir = 'temp-repo/asn';
              const asnClassicalDir = `${asnDir}/classical`;
              
              // 确保目录存在
              await io.mkdirP(asnClassicalDir);
              
              console.log(`开始复制list文件到 ${asnClassicalDir}...`);
              
              // 复制文件
              await processFiles(`${asnDir}/*.list`, async (file) => {
                const fileName = path.basename(file);
                const targetFile = path.join(asnClassicalDir, fileName);
                await fs.copy(file, targetFile);
              });
              
              console.log('文件复制完成');
              
              // 处理文件
              await processFiles(`${asnClassicalDir}/*.list`, async (file) => {
                try {
                  let content = await fs.readFile(file, 'utf8');
                  // 默认增加 "IP-CIDR,"
                  content = content.replace(/^([^#].*?)$/gm, 'IP-CIDR,$1');
                  // 如果包含 ":"，替换为 "IP-CIDR6,"
                  content = content.replace(/^IP-CIDR,([^,]*:)/gm, 'IP-CIDR6,$1');
                  await fs.writeFile(file, content, 'utf8');
                } catch (error) {
                  console.error(`处理文件 ${file} 时出错:`, error);
                }
              });
              
              console.log('ASN目录处理完成');
            }
            
            // 准备输出目录
            async function prepareOutputDir() {
              const finalDir = 'rule-set/repo';
              
              if (fs.existsSync(finalDir)) {
                await io.rmRF(`${finalDir}/*`);
              } else {
                await io.mkdirP(finalDir);
              }
            }
            
            // 复制处理后的文件
            async function copyProcessedFiles() {
              console.log('正在复制文件到目标目录: rule-set/repo');
              
              // 使用外部命令复制大量文件，更高效
              await exec.exec('cp', ['-r', 'temp-repo/.', 'rule-set/repo/']);
              
              const globber = await globModule.create('rule-set/repo/**/*');
              const files = await globber.glob();
              const fileCount = files.filter(file => !fs.statSync(file).isDirectory()).length;
              
              console.log(`下载和更新完成，总文件数: ${fileCount}`);
            }
            
            // 主要执行流程
            async function main() {
              try {
                await processIPv6Rules();
                await processASNDir();
                await prepareOutputDir();
                await copyProcessedFiles();
              } catch (error) {
                console.error('处理过程中出错:', error);
                process.exit(1);
              }
            }
            
            await main();

      - name: 提交更改
        run: |
          cd main-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add rule-set/repo
          git commit -m "更新Meta规则集 $(date '+%Y-%m-%d %H:%M')" || echo "没有变更需要提交"
          git push 